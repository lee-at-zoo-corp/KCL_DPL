// A KCL library to support a nicer standard experience.
// AGPLv3

fn enumerate(@array) {
  return reduce(array, initial = [0, []], f = fn(@el, accum) {
   return [accum[0] + 1, push(accum[1], item=[accum[0], el])]
  })[1]
}

// x = enumerate([1,2,3])
// 
// y = map(x, f = fn(@el) {
//   return el[0] // the index, el[1] is the value.
// })

fn concats(@arrays) {
  return reduce(arrays, initial = [], f = fn(@array, accum) {
    return concat(accum, items=array)
  })
}

// concats([[0,1], [2,3], [4,5]])

fn slice(@array, start, end) {
  return reduce(enumerate(array), initial=[], f=fn(@kv, accum) {
    return if (kv[0] >= start & kv[0] < end) {
      concat(accum, items=[kv[1]])
    } else {
      accum
    }
  })
}

// x = slice([0, 1, 2, 3, 4, 5], start=0, end=3)

fn replaceItem(@array, index, item) {
  a = slice(array, start=0, end=index)
  b = slice(array, start=index + 1, end=count(array))
  return concats([a, [item], b])
}

// x = replaceItem([0, 1, 2, 3, 4, 5], index=3, item=9)

fn arrayOfN(@n, value) {
 return reduce([0..<n], initial=[], f=fn(@el, accum) {
    return concat(accum, items=[value])
 })
}

// arrayOfN(3, 6)
// returns [6,6,6]

fn zip(@array, items) {
  return reduce(enumerate(array), initial=[], f=fn(@kv, accum) {
    i = kv[0]
    return concat(accum, items=[[kv[1], items[i]]])
  })
}

// x = zip([0,1,2],items=[0,1,2])
// returns [[0,0],[1,1],[2,2]]

fn mod(@n, divisor) {
  return rem(rem(n, divisor) + divisor, divisor)
}

// mod(-1, 10)
// returns 9

fn at(@array, i) {
  return array[mod(i, divisor=count(array))]
}

// at([9,8,7,6], i=2)
// returns 7

// at([9,8,7,6], i=-1)
// returns 6

